
/** User registration and Login service **/
var myAppServices = angular.module("myApp.services", []);
myAppServices.factory('userAuthService', function($injector, $window, $cookies, $q) {
   var factory = {};
   var user = {};
   var _userRqSent = false;
   var authenticationHeaders = {};
   
   factory.register = function(data) {
      
      return $injector.get("$http").post(baseUrl+'auth.json', data).success(function(response){
        
      }).error(function(response) {
        
      });
   }
   
   factory.updateProfile = function(data) {
      
      return $injector.get("$http").patch(baseUrl+'auth.json', data).success(function(response){
        
      }).error(function(response) {
        
      });
   }   
   
   factory.login = function(data) {
      
      return $injector.get("$http").post(baseUrl+'auth/sign_in.json', data).success(function(response){
      });
   }
   
   factory.logout = function() {
      
      this.setAuthenticationHeader({});
      $cookies.put('_loggedinID', '');
      return true;
   }
   
   //retrieve logged in user's data
   factory.getUserData = function(freshReq) {
     
     freshReq = freshReq || false;
     
     //deliver user data from cache
     //console.log(freshReq);
     if(_userRqSent && !freshReq) {
       
        var deferred = $q.defer();
        
        setTimeout(function() {
          
          deferred.resolve(user);
        }, 1000);
        
        return deferred.promise;
     }
     
     _userRqSent = true;
     //setup current user id for quick access
      return $injector.get("$http").get(baseUrl+'api/v1/users/my.json').then(function(response){

        user = response.data;
        $cookies.put('_loggedinID', response.id);
        return user;
      });
   }
   
   //retrieve logged in user's address
   factory.getUserAddress = function() {
     
     //setup current user id for quick access
      return $injector.get("$http").get(baseUrl+'api/v1/address_infos/my_address.json').success(function(response){

        console.log(response);
      });
   }   
   
   //set logged in user's data
   factory.setUserData = function(data) {
     
     if(angular.isObject(data))
      user = data;
     else
       throw new Error('Argument should be an object');
   }
   
   //check if user is logged in
   factory.isUserLoggedIn = function() {
     
     var auth = this.getAuthenticationHeader();
     
     if(angular.isDefined(auth['Access-Token']))
      return true;
    
     return false;
   }
   
   //set headers
   factory.setAuthenticationHeader = function(data) {
     
     authenticationHeaders = data;
     $cookies.putObject('_authenticationHeaders', data);
   }
   
   //get headers
   factory.getAuthenticationHeader = function() {
     
     if(!angular.isDefined(authenticationHeaders['access-token'])) {
       
       authenticationHeaders = $cookies.getObject('_authenticationHeaders') || {};
     }
      
     return authenticationHeaders;
   }
   
   return factory;
}); 

/** Notification Messages Service **/
myAppServices.factory('notificationService', function($filter) {
   var factory = {};
   var messages = [];
   
   factory.setMessage = function(key, message) {
      
      if(!this.hasMessage(key))
        messages.push({'key': key, 'message': message});
   }
   
   factory.getMessage = function(key) {
     
     var obj = $filter('filter')(messages, {'key': key}, true);
     
     if(obj.length)
       return obj[0].message;
     
     return '';
   }
   
   factory.hasMessage = function(key) {
     
     if(this.getMessage(key))
       return true;
     
     return false;
   }
   
   factory.getAllMessages = function() {
     
     
   }
   
   return factory;
});

/** Multi Setp Form data Storage **/
myAppServices.factory('formDataStorageService', function($filter,$injector, $window, $cookies) {
  
  var factory = {};
  var dataStore = [];
  var finalData = [];
  
  factory.setStepData = function(step, data) {  
	  
    dataStore.push({'step': step, 'data': data});// Push all form data into dataStore
   /* if(step==0){
	var prefix = 'address_info[';
	var suffix = ']=';
	angular.extend(data, {type: 'ShipperInfo', is_default: 'false',appointment:'false',title:'My ship'});
	var processedData = this.urlEncodedData(data,prefix,suffix); // Function call for urlencoded data
	
	return $injector.get("$http").post(baseUrl+'api/v1/address_infos.json', processedData, {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
    }).success(function(response){
		console.log(response.id);
  	 }).error(function(data, response){ 
		 console.log(response.status);  
     	 });       
   }
   else if(step==1){
	var prefix = 'address_info[';
	var suffix = ']=';	
	angular.extend(data, {type: 'ReceiverInfo', is_default: 'false',appointment:'false'});

	var processedData = this.urlEncodedData(data,prefix,suffix); // Function call for urlencoded data
	
	return $injector.get("$http").post(baseUrl+'api/v1/address_infos.json', processedData, {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
   	 }).success(function(response){
		console.log(processedData);
  	 }).error(function(data, response){        
       		console.log("Error");
     	 });       
   }*/
  }
  
  factory.getStepData = function(step) {    
    var stepData = $filter('filter')(dataStore, {'step': step}, true);    
    if(stepData.length)
      return stepData[0].data;    
      return {};
  }

  factory.getAllStepData = function() {    
    var data = [];
    angular.forEach(dataStore, function(obj, v) {
	finalData.push({'data':obj});
	//console.log(dataStore);
//console.log(finalData);
    });    
    return finalData;
  }
   /***********
	Function Name : urlEncodedData
	Description : To process data into url encoded form
   ************/
  factory.urlEncodedData = function(data,prefix,suffix) {
    
  var enodededData = [];  
  
	angular.forEach(data, function(val, key) {
		enodededData.push(prefix+key+suffix+val);
	});
	return enodededData.join('&');
  }
  
  factory.clearStepData = function(step) {    
    var stepData = $filter('filter')(dataStore, {'step': step}, true);    
    //delete data[stepData.step]
  }  
  return factory;

});
